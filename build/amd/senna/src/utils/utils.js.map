{"version":3,"sources":["utils.js"],"names":["utils","source","target","Array","prototype","slice","call","attributes","forEach","attribute","setAttribute","name","value","getCurrentBrowserPathWithoutHash","window","location","hash","pathname","search","url","uri","getPathname","getSearch","getHash","currentBrowserPath","getUrlPathWithoutHash","getUrlPath","history","pushState","node","removeAttribute"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KASMA,K;;;;;;;sCAOqBC,M,EAAQC,M,EAAQ;AACzCC,UAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BL,OAAOM,UAAlC,EAA8CC,OAA9C,CAAsD,UAACC,SAAD;AAAA,YAAeP,OAAOQ,YAAP,CAAoBD,UAAUE,IAA9B,EAAoCF,UAAUG,KAA9C,CAAf;AAAA,KAAtD;AACA;;;2CAO8B;AAC9B,WAAO,KAAKC,gCAAL,KAA0C,kBAAQC,MAAR,CAAeC,QAAf,CAAwBC,IAAzE;AACA;;;sDAOyC;AACzC,WAAO,kBAAQF,MAAR,CAAeC,QAAf,CAAwBE,QAAxB,GAAmC,kBAAQH,MAAR,CAAeC,QAAf,CAAwBG,MAAlE;AACA;;;8BAOiBC,G,EAAK;AACtB,QAAIC,MAAM,kBAAQD,GAAR,CAAV;AACA,WAAOC,IAAIC,WAAJ,KAAoBD,IAAIE,SAAJ,EAApB,GAAsCF,IAAIG,OAAJ,EAA7C;AACA;;;yCAO4BJ,G,EAAK;AACjC,QAAIC,MAAM,kBAAQD,GAAR,CAAV;AACA,WAAOC,IAAIC,WAAJ,KAAoBD,IAAIE,SAAJ,EAA3B;AACA;;;kDAOqCH,G,EAAK;AAC1C,QAAIC,MAAM,kBAAQD,GAAR,CAAV;AACA,WAAOC,IAAIC,WAAJ,EAAP;AACA;;;wCAQ2BF,G,EAAK;AAChC,QAAIA,GAAJ,EAAS;AACR,SAAMK,qBAAqB,KAAKX,gCAAL,EAA3B;AACA;AACA;AACA,YAAOb,MAAMyB,qBAAN,CAA4BN,GAA5B,MAAqC,KAAKO,UAAL,CAAgBF,kBAAhB,CAA5C;AACA;AACD,WAAO,KAAP;AACA;;;6CAOgC;AAChC,WAAO,CAAC,EAAE,kBAAQV,MAAR,CAAea,OAAf,IAA0B,kBAAQb,MAAR,CAAea,OAAf,CAAuBC,SAAnD,CAAR;AACA;;;uCAO0BC,I,EAAM;AAChC1B,UAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BuB,KAAKtB,UAAhC,EAA4CC,OAA5C,CAAoD,UAACC,SAAD;AAAA,YAAeoB,KAAKC,eAAL,CAAqBrB,UAAUE,IAA/B,CAAf;AAAA,KAApD;AACA;;;;;;mBAIaX,K","file":"utils.js","sourcesContent":["'use strict';\n\nimport globals from '../globals/globals';\nimport Uri from 'metal-uri';\n\n/**\n * A collection of static utility functions.\n * @const\n */\nclass utils {\n\n\t/**\n\t * Copies attributes form source node to target node.\n\t * @return {void}\n\t * @static\n\t */\n\tstatic copyNodeAttributes(source, target) {\n\t\tArray.prototype.slice.call(source.attributes).forEach((attribute) => target.setAttribute(attribute.name, attribute.value));\n\t}\n\n\t/**\n\t * Gets the current browser path including hashbang.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getCurrentBrowserPath() {\n\t\treturn this.getCurrentBrowserPathWithoutHash() + globals.window.location.hash;\n\t}\n\n\t/**\n\t * Gets the current browser path excluding hashbang.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getCurrentBrowserPathWithoutHash() {\n\t\treturn globals.window.location.pathname + globals.window.location.search;\n\t}\n\n\t/**\n\t * Extracts the path part of an url.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getUrlPath(url) {\n\t\tvar uri = new Uri(url);\n\t\treturn uri.getPathname() + uri.getSearch() + uri.getHash();\n\t}\n\n\t/**\n\t * Extracts the path part of an url without hashbang.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getUrlPathWithoutHash(url) {\n\t\tvar uri = new Uri(url);\n\t\treturn uri.getPathname() + uri.getSearch();\n\t}\n\n\t/**\n\t * Extracts the path part of an url without hashbang and query search.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getUrlPathWithoutHashAndSearch(url) {\n\t\tvar uri = new Uri(url);\n\t\treturn uri.getPathname();\n\t}\n\n\t/**\n\t * Checks if url is in the same browser current url excluding the hashbang.\n\t * @param  {!string} url\n\t * @return {boolean}\n\t * @static\n\t */\n\tstatic isCurrentBrowserPath(url) {\n\t\tif (url) {\n\t\t\tconst currentBrowserPath = this.getCurrentBrowserPathWithoutHash();\n\t\t\t// the getUrlPath will create a Uri and will normalize the path and\n\t\t\t// remove the trailling '/' for properly comparing paths.\n\t\t\treturn utils.getUrlPathWithoutHash(url) === this.getUrlPath(currentBrowserPath);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns true if HTML5 History api is supported.\n\t * @return {boolean}\n\t * @static\n\t */\n\tstatic isHtml5HistorySupported() {\n\t\treturn !!(globals.window.history && globals.window.history.pushState);\n\t}\n\n\t/**\n\t * Removes all attributes form node.\n\t * @return {void}\n\t * @static\n\t */\n\tstatic clearNodeAttributes(node) {\n\t\tArray.prototype.slice.call(node.attributes).forEach((attribute) => node.removeAttribute(attribute.name));\n\t}\n\n}\n\nexport default utils;\n"]}